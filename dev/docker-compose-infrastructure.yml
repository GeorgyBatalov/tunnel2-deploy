name: tunnel2-infrastructure

services:
  # ВРЕМЕННО ЗАКОММЕНТИРОВАНО: Раскомментировать после деплоя PostgreSQL
  # vault:
  #   image: hashicorp/vault:1.20
  #   container_name: vault
  #   user: "0:0"   # запускаем Vault ПОД root
  #   entrypoint: [ "vault","server","-config=/vault/config/config.hcl" ]
  #   ports:
  #     - "8200:8200"    # UI+API наружу
  #   cap_add:
  #     - IPC_LOCK
  #   volumes:
  #     - vault-data:/vault/data
  #     - ./vault/config.hcl:/vault/config/config.hcl:ro
  #   restart: unless-stopped
  #   networks:
  #     - tunnel2-network

  redis:
    image: redis:7.4
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - tunnel2-network

  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - "15672:15672"   # UI
      - "5672:5672"
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - tunnel2-network

  postgres:
    image: postgres:16.0
    container_name: tunnel2_postgres
    ports:
      - "12010:5432"
    restart: unless-stopped
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin123
      - POSTGRES_DB=tunnel2
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d tunnel2"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tunnel2-network

  dns_server:
    build:
      context: ../../tunnel2-dns-server
      dockerfile: Dockerfile
    ports:
      - "12053:53/udp"   # DNS UDP
      - "12053:53/tcp"   # DNS TCP
      - "12080:8080"     # Health check endpoint
    restart: unless-stopped
    env_file:
      - ./env/dns_server.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tunnel2-network

volumes:
  vault-data:
  postgres-data:

networks:
  tunnel2-network:
    name: tunnel2-network
    driver: bridge
